#!/usr/bin/python3

import argparse
import sys
import subprocess
from pathlib import Path

MESSAGE = {
    "ISNT_GITHUB_REPO": "Current directory isn't a github repository root.",
    "NO_CHANGE_DETECTED": "No file to push !",
    "CHANGE_DETECTED": "Some change on the local repository was found !",
    "ASK_COMMIT_MESSAGE": "Give a meaningful message for the commit: ",
    "INVALID_COMMIT_MESSAGE": "The message '{}' is invalid !",
    "COMMIT_SUCCEED": "Commit succeed !"
}

def print_message(key, *args, file = sys.stdout):
    str = MESSAGE[key]
    if str == None or str == "":
        return
    if str.count("{}") > len(args):
        print("Missing some argument.", file = sys.stderr)
        return
    print(str.format(*args), file = file)

def debug_print(str, debug_mode = None):
    if debug_mode == None:
        print("Debug_mode wasn't give !", file = sys.stderr)
        return
    if not debug_mode:
        return
    print(f"[DEBUG] {str}")

def parse_args(raw_argument):
    parser = argparse.ArgumentParser(description = 
        "The push that file. Used to push github file with style, and some utils soon (I hope) !")
    parser.add_argument("--dir",
                        help = "The directory to push (Default: '.')", 
                        default = ".")
    parser.add_argument("--exclude",
                        help = "The file too exclude. (Separate error with ',' if you want to exclude multiple one) (Default: '')", 
                        default = "")
    parser.add_argument("--debug",
                        help = "Use to activate debug mode (It's doesnt execute any command).", 
                        action = "store_true")
    parser.add_argument("--message", "-m",
                        help = "Use force a message (No input is required).", 
                        default = None)
    parser.add_argument("--allow_empty_message", "--allow_empty",
                        help = "Allow empty message.",
                        action = "store_true")
    return parser.parse_args(raw_argument)

def execute_command(command):
    return subprocess.run(command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def any_file_to_push():
    command_result = execute_command(["git", "diff", "--exit-code"])
    if command_result.returncode != 0:
        return True
    command_result = subprocess.check_output(["git", "ls-files", "--other", "--exclude-standard", "--directory"])
    if command_result != b'':
        return True
    return False

def ask_for_commit_message(args):
    if args.message != None:
        return
    args.message = input(MESSAGE["ASK_COMMIT_MESSAGE"])
    if args.message.strip() == "":
        print_message("INVALID_COMMIT_MESSAGE", args.message, file=sys.stderr)
        return False
    return True

def add_file(args):
    debug_print(f"Target directory: '{args.dir}'", args.debug)
    if not args.debug:
        execute_command(["git", "add", args.dir]) 

def commit_file(args):
    debug_print(f"Commit message: '{args.message}'", args.debug)
    if not args.debug:
        execute_command(["git", "commit", "-m", args.message]) 

def update_upstream(args):
    current_branch = None
    with open('.git/HEAD') as file:
        current_branch = file.readline().split("/")[-1].strip()
    debug_print(f"Updating upstream to: '{current_branch}'", args.debug)
    if not args.debug:
        execute_command(["git", "branch", "--set-upstream", current_branch]) 


def push_file(args):
    debug_print("Pushing file.", args.debug)
    if not args.debug:
        execute_command(["git", "push"]) 


def main():
    args = parse_args(sys.argv[1:])
    if not Path(".git/").exists():
        print_message("ISNT_GITHUB_REPO", file = sys.stderr)
        return 84
    if not any_file_to_push():
        print_message("NO_CHANGE_DETECTED")
        return 0
    print_message("CHANGE_DETECTED")
    if not ask_for_commit_message(args):
        return 84
    add_file(args)
    commit_file(args)
    update_upstream(args)
    push_file(args)
    print_message("COMMIT_SUCCEED")
    return 0

if __name__ == '__main__':
    exit(main())
