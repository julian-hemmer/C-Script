#!/usr/bin/python3

import argparse
import sys
import subprocess
from pathlib import Path
import readline
import re

MESSAGE = {
    "ISNT_GITHUB_REPO": "Current directory isn't a github repository root.",
    "NO_CHANGE_DETECTED": "No file to push !",
    "CHANGE_DETECTED": "Some change on the local repository was found !",
    "ASK_COMMIT_MESSAGE": "Give a meaningful message for the commit: ",
    "INVALID_COMMIT_VARIABLE_VALUE": "The value '{}' is invalid !",
    "DEFAULT_COMMIT_SUCCEED": "Commit succeed !",
    "ASK_COMMIT_RULES": "Give a commit rules: ",
    "INVALID_COMMIT_RULE": "Invalid commit rule given ! ('{}')",
    "DEFAULT_ASK_VAR": "Give a value for the var '{}': "
}

COMMIT_RULES = {
    "REMOVE": {
        "description": "[REMOVE] -> Used to ",
        "message": "[🔥] - {message}.",
        "ask_message": "Explain what was removed: ",
        "success": "Boom nothings here now !"
    }, "DOC": {
        "message": "[📝] - {message}.",
        "ask_message": "Explain which docs did you add: ",
        "success": "Nice i like when somebody add documentation !"
    }, "NEW": {
        "message": "[✨] - {message}.",
        "ask_message": "Explain what's new here: ",
        "success": "Wooow new feature already ?"
    }, "BUG": {
        "message": "[🐛] - {message}.",
        "ask_message": "Which bug did you fix: ",
        "success": "Why did you put bug here in the first place ?"
    }
}

def print_message(key, *args, file = sys.stdout):
    str = MESSAGE[key]
    if str == None or str == "":
        return
    if str.count("{}") > len(args):
        print("Missing some argument.", file = sys.stderr)
        return
    print(str.format(*args), file = file)

def debug_print(str, debug_mode = None):
    if debug_mode == None:
        print("Debug_mode wasn't give !", file = sys.stderr)
        return
    if not debug_mode:
        return
    print(f"[DEBUG] {str}")

def parse_args(raw_argument):
    parser = argparse.ArgumentParser(description = 
        "The push that file. Used to push github file with style, and some utils soon (I hope) !")
    parser.add_argument("--dir",
                        help = "The directory to push (Default: '.')", 
                        default = ".")
    parser.add_argument("--debug",
                        help = "Use to activate debug mode (It's doesnt execute any command).", 
                        action = "store_true")
    parser.add_argument("--message", "-m",
                        help = "The commit message.", 
                        default = None)
    parser.add_argument("--allow_empty_message", "--allow_empty",
                        help = "Allow empty message.",
                        action = "store_true")
    return parser.parse_args(raw_argument)

def execute_command(command):
    return subprocess.run(command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def any_file_to_push():
    command_result = execute_command(["git", "diff", "--exit-code"])
    if command_result.returncode != 0:
        return True
    command_result = subprocess.check_output(["git", "ls-files", "--other", "--exclude-standard", "--directory"])
    if command_result != b'':
        return True
    return False

####
# COMMIT RULE ASKER
####

CHOICES = []

def completer(text, state):
    options = [cmd for cmd in CHOICES if cmd.startswith(text)]
    if state < len(options):
        return options[state]
    else:
        return None

def ask_for_commit_rule():
    global CHOICES
    readline.set_completer(completer)
    readline.parse_and_bind("tab: complete")
    CHOICES = COMMIT_RULES.keys()
    rule = input(MESSAGE["ASK_COMMIT_RULES"]).strip()
    match = next((k for k in COMMIT_RULES if k.lower() == rule.lower()), rule)
    readline.set_completer(None)
    if match in COMMIT_RULES and "description" in COMMIT_RULES[match]:
        print(COMMIT_RULES[match]["description"])
    return match

####
# COMMIT VALUE FILLER
####

def ask_for_commit_variable(rules):
    global CHOICES
    fields = re.findall(r"{(.*?)}", rules["message"])
    values = {}
    for field in fields:
        message = None
        if f"ask_{field}" in rules:
            message = rules[f"ask_{field}"]
        else:
            message = MESSAGE["DEFAULT_ASK_VAR"].format(field)
        readline.set_completer(completer)
        readline.parse_and_bind("tab: complete")
        CHOICES = None
        if f"choices_{field}" in rules:
            CHOICES = rules[f"choices_{field}"]
        user_input = input(message)
        readline.set_completer(None)
        if user_input.strip() == "":
            print_message("INVALID_COMMIT_VARIABLE_VALUE", user_input)
            return None
        values[field] = user_input
    return values

#####
# ADD COMMIT FILE
#####

def add_file(args):
    debug_print(f"Target directory: '{args.dir}'", args.debug)
    if not args.debug:
        execute_command(["git", "add", args.dir]) 

#####
# FILE COMMIT
#####

def commit_file(args):
    debug_print(f"Commit message: '{args.message}'", args.debug)
    if not args.debug:
        execute_command(["git", "commit", "-m", args.message]) 

#####
# UPDATE GIT UPSTREAM
#####

def update_upstream(args):
    current_branch = None
    with open('.git/HEAD') as file:
        current_branch = file.readline().split("/")[-1].strip()
    debug_print(f"Updating upstream to: '{current_branch}'", args.debug)
    if not args.debug:
        execute_command(["git", "branch", "--set-upstream", current_branch]) 

#####
# PUSH FILE
#####

def push_file(args):
    debug_print("Pushing file.", args.debug)
    if not args.debug:
        execute_command(["git", "push"]) 

def main():
    args = parse_args(sys.argv[1:])
    if not Path(".git/").exists():
        print_message("ISNT_GITHUB_REPO", file = sys.stderr)
        return 84
    if not any_file_to_push():
        print_message("NO_CHANGE_DETECTED")
        return 0
    print_message("CHANGE_DETECTED")

    if args.message == None:
        # Commit rule
        commit_rule = ask_for_commit_rule()
        if not commit_rule in COMMIT_RULES:
            print_message("INVALID_COMMIT_RULE", commit_rule)
            return 84

        # Ask Commit variable
        var = ask_for_commit_variable(COMMIT_RULES[commit_rule])
        if var == None:
            return 84
        args.message = COMMIT_RULES[commit_rule]["message"].format(**var)
    
    # Commit file
    add_file(args)
    commit_file(args)
    update_upstream(args)
    push_file(args)

    if commit_rule != None and "success" in COMMIT_RULES[commit_rule]:
        print(COMMIT_RULES[commit_rule]["success"])
    else:
        print_message("DEFAULT_COMMIT_SUCCEED")
    return 0

if __name__ == '__main__':
    exit(main())
